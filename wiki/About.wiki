#summary About the project.

= Introduction =

This project is part of the [https://orawww.uibk.ac.at/public_prod/owa/lfuonline_lv.details?lvnr_id_in=703701&sem_id_in=08W Praktikum f√ºr Verteilte und Parallele Systeme] course at the [http://uibk.ac.at University of Innsbruck], Austria.

The team of this project implements a parallel version of the k-NN algorithm on IBM's Cell processor. To measure the performance of the implementation we classify hand written images contained in the [http://yann.lecun.com/exdb/mnist/ MNIST database]. We run our programs on a Sony Playstation 3, kindly provided by Gregor Burger. Therefor, the number of SPEs is limited to 6, instead of the possible 8 SPEs.

= Presentation =

 * You can download the introduction presentation (in german) [http://cell-knn.googlecode.com/files/IntroductionPresentation.pdf here].
 * A presentation showing our schedule can be found [http://cell-knn.googlecode.com/files/Schedule.pdf here]. Alternatively, visit the [Schedule schedule] wiki page.
 * A presentation briefly showing the results of the first parallel implementation [CellkNNv1 Cell k-NN 1.0] and a sketch of [CellkNNv2 Cell k-NN 2.0] can be found [http://cell-knn.googlecode.com/files/Cell%20k-NN%201.0.pdf here].

= Results =

Currently, two versions of the k-NN algorithm have been implemented:
 * [http://code.google.com/p/cell-knn/source/browse/#svn/trunk/Cell_kNN_v1 Cplusplu_kNN]: a _sequential_ implementation written in C++ for both x86 and Cell BE.
 * [http://code.google.com/p/cell-knn/source/browse/#svn/trunk/Cell_kNN_v1 Cell_kNN_v1]: a simple _parallel_ implementation written in C/C++ specifically for the Cell BE.

See [CellKNNv1#Results Cell k-NN 1.0] for more information.